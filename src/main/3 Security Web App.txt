Активация защиты WEB приложения

Boot spring предоставляет стартер для безопасности spring-boot-starter-security для дополнения в качестве зависимости.
После подляючения зависимости стартера безопасности необходимо создать файл с конфигурацией безопасности.
В пакете config создаем 2 класса:

MvcConfig (для мапинга страниц без логики просто отображение шаблона)
Аннотация @Configuration помечает класс как конфиг и при старте приложения конфиг будет применен.
Для маппинга адресов на страницы переопределяется метод addViewControllers и у параметра ViewControllerRegistry registry вызывается метод addViewController("путь").setViewName("имя шаблона")

WebSecurityConfig (для настройки какие страници будут доспупны всем, а какие только после аутентификации)
Переопределенный метод configure(HttpSecurity http) настраивает доступ к адресам приложения
Метод .authorizeRequests() включекет запросы с авторизацией
Методы .antMatchers("путь 1", "путь2").permitAll() включают доступ к перечисленным путям для всех
Методы .anyRequest().authenticated()  запросы к остальным страницам только с аутентификацией
Метод .and() совмещает циклы настройки
Методы .formLogin().loginPage("путь").petmitAll() назначают путь для страницы логина и открывают доступ для всех
Метод .and() совмещает циклы настройки
Методы .logout().permitAll() открывают доступ для всех для запросов логаута
Переопределенный метод configure(AuthenticationManagerBuilder auth) настраивает доступ к информации о пользователе из БД
Метод .jdbcAuthentication() аутентификация при помощи jdbc
Метод .dataSource(dataSource(Autowired)) подлючает объект источника данных для аутентификации
Метод .passwordEncoder() назначает чем шифровать пароли
Метод .userByUsernameQuery() запрос имя пользователя, пароль, признак активности из БД
Метод .authoritiesByUsrnameQuery() запрос имя пользователя и роль из БД

Класс сущность User
Аннотация @Entity - Класс сущность
Аннотация @Table(name="имя") задает имя таблици в БД(postgresql не любит имя user)
Для хранения ролей Set<Role>
Аннотация @ElementCollection(targetClass = "класс", fetch = метод подгрузки(жадный и ленивый) указывает что хранится коллекция
Аннотация @JoinColumn(name = "имя столбца для связи аблиц БД")
Аннотация @CollectionTable(name = имя таблицы, joinColumn = Аннотация @JoinColumn(указывает что таблица связана по индексу)
Аннотация @Enumerated(EnumType) указывет как будут храниться перечисления в БД

интерфейс UserRepository наследник JpaRepository<User, Long> для работы с User в БД
Обозначенные в нем функции гененрируются автоматически, а имена выбираются по правилам spring

После настройки безопасности необходимо во все шаблоны thymeleaf добавить в тег head xmlns:sec="https://www.thymeleaf.org/thymeleaf-extras-sprignsecurity3"
Для того что бы сервер не отбрасывал запросы нажно поле _csrf.token thymeleaf подсовывает его сам в отличии от др шаблонизаторов